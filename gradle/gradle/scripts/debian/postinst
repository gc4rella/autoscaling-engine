#!/bin/sh

# Copyright (c) 2016 Open Baton (http://www.openbaton.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


##########################
#### General Settings ####
##########################

set -e
set -u
#set -x # only for DEBUG

# Make available the functions defined in /lib/lsb/init-functions
. /lib/lsb/init-functions


##########################
#### Global Variables ####
##########################

OPENBATON_COMPONENT_NAME_FANCY="AutoScaling Engine (ASE)"
OPENBATON_COMPONENT_NAME=ase

OPENBATON_BASE_DIR=/usr
OPENBATON_COMPONENT_EXE_DIR=${OPENBATON_BASE_DIR}/bin

OPENBATON_BASE_CONFIG_DIR=/etc/openbaton
OPENBATON_COMPONENT_CONFIG_FILE=openbaton-${OPENBATON_COMPONENT_NAME}.properties
OPENBATON_NFVO_CONFIG_FILE=openbaton-nfvo.properties

OPENBATON_NFVO_IP_DEFAULT=localhost

OPENBATON_COMPONENT_AUTOSTART_DEFAULT=true
OPENBATON_COMPONENT_AUTOSTART=${OPENBATON_COMPONENT_AUTOSTART:-$OPENBATON_COMPONENT_AUTOSTART_DEFAULT}

DEBIAN_FRONTEND_DEFAULT=dialog
DEBIAN_FRONTEND=${DEBIAN_FRONTEND:-$DEBIAN_FRONTEND_DEFAULT}


####################
#### Open Baton ####
####################

configure_rabbitmq () {
    # Set the RabbitMQ IP
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" -a ! -f "${OPENBATON_BASE_CONFIG_DIR}"/"${OPENBATON_NFVO_CONFIG_FILE}" ]; then
        rabbitmq_broker_ip=$(whiptail --inputbox "\nEnter the RabbitMQ broker IP:" 8 140 localhost --title "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi
    else
        rabbitmq_broker_ip=$( awk '$0 ~ "nfvo.rabbit.brokerIp[[:space:]]*="' "${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}" | awk -F'=' '{print $2}' )
    fi
    if [ ! -z ${rabbitmq_broker_ip+x} ] ; then # The empty string is considered as unset
        log_success_msg "Setting RabbitMQ IP into ${OPENBATON_COMPONENT_NAME_FANCY}: ${rabbitmq_broker_ip}"
        export rabbitmq_broker_ip=${rabbitmq_broker_ip}
        sed -i "s|ase.rabbitmq.brokerIp\s*=\s*localhost|ase.rabbitmq.brokerIp=${rabbitmq_broker_ip}|g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
    fi

    # Set the RabbitMQ Management port
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" -a ! -f "${OPENBATON_BASE_CONFIG_DIR}"/"${OPENBATON_NFVO_CONFIG_FILE}" ]; then
        rabbitmq_management_port=$(whiptail --inputbox "\nEnter the RabbitMQ management port:" 8 140 15672 --title "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi
    else
        rabbitmq_management_port=$( awk '$0 ~ "nfvo.rabbit.management.port[[:space:]]*="' "${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}" | awk -F'=' '{print $2}' )
    fi
    if [ ! -z ${rabbitmq_management_port+x} ] ; then # The empty string is considered as unset
        log_success_msg "Setting RabbitMQ Management port into ${OPENBATON_COMPONENT_NAME_FANCY}: ${rabbitmq_management_port}"
        export rabbitmq_management_port=${rabbitmq_management_port}
        sed -i "s|ase.rabbitmq.management.port\s*=\s*15672|ase.rabbitmq.management.port=${rabbitmq_management_port}|g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
    fi

    # Set the RabbitMQ password
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" -a ! -f "${OPENBATON_BASE_CONFIG_DIR}"/"${OPENBATON_NFVO_CONFIG_FILE}" ]; then
        rabbitmq_password=$(whiptail --passwordbox "\nProvide the RabbitMQ 'admin' password:" 8 140 --title "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
           echo ""
           log_warning_msg "Aborting Open Baton installation"
           exit 1
        fi
    else
        rabbitmq_password=$( awk '$0 ~ "spring.rabbitmq.password[[:space:]]*="' "${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}" | awk -F'=' '{print $2}' )
    fi
    if [ ! -z ${rabbitmq_password+x} ] ; then # The empty string is considered as unset
        log_success_msg "Setting RabbitMQ password into ${OPENBATON_COMPONENT_NAME_FANCY}: ****"
        export rabbitmq_password=${rabbitmq_password}
        sed -i "s|spring.rabbitmq.password\s*=\s*.*|spring.rabbitmq.password=${rabbitmq_password}|g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
    fi
} 

configure_nfvo () {
    # In case of "noninteractive" FRONTEND the default value will remain valid (openbaton_nfvo_ip: localhost)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        openbaton_nfvo_ip=$(whiptail --inputbox "\nEnter the IP of the NFVO:" 8 140 localhost --title "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
           echo ""
           log_warning_msg "Aborting Open Baton installation"
           exit 1
        fi
    fi
    # Set the NFVO IP
    export openbaton_nfvo_ip=${openbaton_nfvo_ip:-$OPENBATON_NFVO_IP_DEFAULT}
    sed -i "s|nfvo.ip\s*=.*|nfvo.ip=${openbaton_nfvo_ip}|g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}

    # Set the NFVO admin's password
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" -a ! -f "${OPENBATON_BASE_CONFIG_DIR}"/"${OPENBATON_NFVO_CONFIG_FILE}" ]; then
        nfvo_admin_password=$(whiptail --passwordbox "\nProvide the NFVO 'admin' password:" 8 140 --title "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi
    else
        nfvo_admin_password=$( awk '$0 ~ "nfvo.security.admin.password[[:space:]]*="' "${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}" | awk -F'=' '{print $2}' )
    fi
    if [ ! -z ${nfvo_admin_password+x} ] ; then # The empty string is considered as unset
        log_success_msg "Setting NFVO admin's password into AutoScaling Engine: ${nfvo_admin_password}"
        export nfvo_admin_password=${nfvo_admin_password}
        sed -i "s|nfvo.password\s*=\s*openbaton|nfvo.password=${nfvo_admin_password}|g" ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
    fi
}

configure_new_installation () {
    log_success_msg "Configuring Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation .."
    chmod a+x ${OPENBATON_COMPONENT_EXE_DIR}/openbaton-${OPENBATON_COMPONENT_NAME}
    configure_rabbitmq
    configure_nfvo
    log_success_msg "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation completed"
}

configure_for_upgrade () {
    ## Procedure to merge old and new properties files ##

    # The old properties file is copied in /tmp before this upgrade procedure is executed (see 'prerm' file)
    cp /tmp/${OPENBATON_COMPONENT_CONFIG_FILE} /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.old
    cp ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE} /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new

    # Extract the properties keys from the old properties file
    awk -F'=' '{if($0 ~ "=") {print $1 "="}}' /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.old > /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.old_keys
    sed -i s/\#//g /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.old_keys
    sed -i s/\ //g /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.old_keys

    # Extract the properties keys from the new properties file
    awk -F'=' '{if($0 ~ "=") {print $1 "="}}' /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new > /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new_keys
    sed -i s/\#//g /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new_keys
    sed -i s/\ //g /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new_keys

    # Extract the common properties keys between the old and new properties files
    grep -Fwf /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new_keys /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.old_keys > /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.common_keys

    # Extract the all line from the old property file for each common properties key
    sed -i s/=//g /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new_keys
    grep -Fwf /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new_keys /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.old      > /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.common_keys_old_lines

    # For each common key overwrite the old property value in the new properties file
    exec 3</tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.common_keys
    exec 4</tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.common_keys_old_lines
    while IFS='' read -r key <&3 && read -r line <&4; do
        key=$(echo $key | awk -F'=' '{print $1}')
        sed -i "s|.*${key}\s*=.*|${line}|" /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new
    done
    exec 3<&-
    exec 4<&-

    # Overwrite the new properties file with the 'upgraded' new properties file
    mv /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}.new ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}

    # Clear tmp files used for upgrade
    rm /tmp/${OPENBATON_COMPONENT_CONFIG_FILE}*

    log_success_msg "Upgrading Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation .."
}

start_component () {
    # Allow the use of the .deb package to install Open Baton with Docker (the Docker file developer need to manage the starting of the GVNFM in the Docker file)
    if [ "${OPENBATON_COMPONENT_AUTOSTART}" = "true" ]; then
        if systemctl start openbaton-${OPENBATON_COMPONENT_NAME}.service >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} .."
        elif service openbaton-${OPENBATON_COMPONENT_NAME} start >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} .."
        elif start openbaton-${OPENBATON_COMPONENT_NAME} >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} .."
        else
            log_failure_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY}"
        fi
    fi
}


##############
#### Main ####
##############

case "${1}" in
    configure)
        if [ "${2}" = "" ]; then # new installation (during first installation the postinst file is invoked as: 'postinst configure')
            configure_new_installation
        else # upgrade (during upgrade the postinst file is invoked as: 'postinst configure <old_version_number>')
            configure_for_upgrade
        fi
        ;;

    remove|purge|failed-upgrade|abort-install|abort-upgrade|disappear)
        ;;

    *)
        log_failure_msg "postinst called with unknown argument ${1}"
        exit 1
        ;;
esac

start_component

exit 0


